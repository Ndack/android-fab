buildscript {
	repositories {
		jcenter()
	}

	dependencies {
		classpath 'com.android.tools.build:gradle:1.2.3'
		classpath 'me.tatarka:gradle-retrolambda:3.2.3'
		classpath 'me.tatarka.retrolambda.projectlombok:lombok.ast:0.2.3.a2'
	}

	configurations.classpath.exclude group: 'com.android.tools.external.lombok'
}

def version = new Properties()
version['code'] = 4
version['name'] = '1.0.0'

apply plugin: 'me.tatarka.retrolambda'

apply plugin: 'com.android.library'
android {
	// required by retrolambda
	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}

	compileSdkVersion 23
	buildToolsVersion "23.0.2"

	defaultConfig {
		minSdkVersion 12
		targetSdkVersion 23

		testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
	}
}

repositories {
	jcenter()
}

dependencies {
	compile fileTree(include: ['*.jar'], dir: 'libs')
	compile 'com.android.support:support-annotations:24.0.0-alpha1'
	compile 'com.android.support:cardview-v7:23.2.0'

	androidTestCompile 'junit:junit:4.12'
	androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
	androidTestCompile('com.android.support.test:testing-support-lib:0.1') {
		exclude group: 'junit'
	}
}

/*========================*
 * Maven Plugin Packaging *
 *========================*/

apply plugin: 'maven'

def localReleaseDest = "${buildDir}/release/${version['name']}"

task androidJavadocs(type: Javadoc) {
	failOnError = false
	source = android.sourceSets.main.java.srcDirs
	ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
	classpath += files(ext.androidJar)
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
	classifier = 'javadoc'
	from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
	classifier = 'sources'
	from android.sourceSets.main.java.srcDirs
}

uploadArchives {
	repositories.mavenDeployer {
		pom.groupId = 'uk.co.markormesher'
		pom.artifactId = 'android-fab'
		pom.version = version['name']
		repository(url: "file://${localReleaseDest}")
	}
}

task zipRelease(type: Zip) {
	from localReleaseDest
	destinationDir buildDir
	archiveName "release-${version['name']}.zip"
}

task generateRelease << {
	println "Release ${version['name']} can be found at ${localReleaseDest}/"
	println "Release ${version['name']} zipped can be found ${buildDir}/release-${version['name']}.zip"
}

generateRelease.dependsOn(uploadArchives)
generateRelease.dependsOn(zipRelease)

artifacts {
	archives androidSourcesJar
	archives androidJavadocsJar
}